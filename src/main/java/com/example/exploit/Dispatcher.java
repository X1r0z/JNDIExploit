package com.example.exploit;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import com.example.exploit.annotation.LdapController;
import com.example.exploit.annotation.LdapMapping;
import org.reflections.Reflections;
import org.reflections.scanners.MethodAnnotationsScanner;
import org.reflections.scanners.TypeAnnotationsScanner;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Method;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Hashtable;
import java.util.Set;

public class Dispatcher {
    public static byte[] dispatch(String route, Hashtable<String, String> params) throws Exception {
        Logger root = (Logger) LoggerFactory.getLogger("org.reflections");
        root.setLevel(Level.OFF);

        Reflections ref = new Reflections(Dispatcher.class.getPackage() + ".controller",
                new TypeAnnotationsScanner(), new MethodAnnotationsScanner());
        Set<Class<?>> controllerClasses = ref.getTypesAnnotatedWith(LdapController.class);

        for (Class<?> clazz : controllerClasses) {
            LdapMapping baseMapping = clazz.getAnnotation(LdapMapping.class);
            String basePath = (baseMapping != null) ? baseMapping.value() : "";

            Method[] methods = clazz.getMethods();
            for (Method method : methods) {
                LdapMapping mapping = method.getAnnotation(LdapMapping.class);
                if (mapping != null) {
                    Path methodPath = Paths.get(basePath, mapping.value());
                    Path currentPath = Paths.get(route);
                    if (methodPath.equals(currentPath)) {
                        return (byte[]) method.invoke(clazz.newInstance(), params);
                    }
                }
            }
        }
        return null;
    }
}
